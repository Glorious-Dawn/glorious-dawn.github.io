{"version":3,"sources":["logo.svg","GachaTool.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","bionomial_cdf","X","N","P","LogGamma","Z","S","Math","log","Betinc","A","B","C9","A0","B0","A1","B1","M9","A2","abs","bincdf","BT","alert","floor","exp","useInput","initialValue","useState","value","setValue","reset","bind","onChange","event","target","RewardTable","rewards","setRewards","headers","raddN","bindRaddN","resetRaddN","raddP","bindRaddP","resetRaddP","raddV","bindRaddV","resetRaddV","handleSwitch","e","name","val","checked","rewardList","hasOwnProperty","push","TableRow","key","TableCell","padding","Switch","color","Button","variant","onClick","newVal","removeReward","TableContainer","component","Paper","Table","aria-label","TableHead","map","h","TableBody","TextField","label","size","required","preventDefault","Number","GachaTool","pulls","bindPulls","spark_value","n","vals","v","sort","a","b","prob","forEach","x","console","fail","calc_spark_value","gacha_value","r","calc_gacha_value","Typography","App","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.471b1751.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useState} from 'react';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography'\r\n\r\n// Credit: https://www.math.ucla.edu/~tom/distributions/binomial.html\r\nfunction bionomial_cdf(X,N,P) {\r\n    function LogGamma(Z) {\r\n        let S=1+76.18009173/Z-86.50532033/(Z+1)+24.01409822/(Z+2)-1.231739516/(Z+3)+.00120858003/(Z+4)-.00000536382/(Z+5);\r\n        let LG= (Z-.5)*Math.log(Z+4.5)-(Z+4.5)+Math.log(S*2.50662827465);\r\n        return LG;\r\n    }\r\n    function Betinc(X,A,B) {\r\n        let A0=0;\r\n        let B0=1;\r\n        let A1=1;\r\n        let B1=1;\r\n        let M9=0;\r\n        let A2=0;\r\n        let C9;\r\n        while (Math.abs((A1-A2)/A1)>.00001) {\r\n            A2=A1;\r\n            C9=-(A+M9)*(A+B+M9)*X/(A+2*M9)/(A+2*M9+1);\r\n            A0=A1+C9*A0;\r\n            B0=B1+C9*B0;\r\n            M9=M9+1;\r\n            C9=M9*(B-M9)*X/(A+2*M9-1)/(A+2*M9);\r\n            A1=A0+C9*A1;\r\n            B1=B0+C9*B1;\r\n            A0=A0/B1;\r\n            B0=B0/B1;\r\n            A1=A1/B1;\r\n            B1=1;\r\n        }\r\n        return A1/A;\r\n    }\r\n    let bincdf;\r\n    let Z,A,B,S,BT,Betacdf;\r\n    if (N<=0) {\r\n        alert(\"sample size must be positive\")\r\n    } else if ((P<0)||(P>1)) {\r\n        alert(\"probability must be between 0 and 1\")\r\n    } else if (X<0) {\r\n        bincdf=0\r\n    } else if (X>=N) {\r\n        bincdf=1\r\n    } else {\r\n        X=Math.floor(X);\r\n        Z=P;\r\n        A=X+1;\r\n        B=N-X;\r\n        S=A+B;\r\n        BT=Math.exp(LogGamma(S)-LogGamma(B)-LogGamma(A)+A*Math.log(Z)+B*Math.log(1-Z));\r\n        if (Z<(A+1)/(S+2)) {\r\n            Betacdf=BT*Betinc(Z,A,B)\r\n        } else {\r\n            Betacdf=1-BT*Betinc(1-Z,B,A)\r\n        }\r\n        bincdf=1-Betacdf;\r\n    }\r\n    return bincdf;\r\n}\r\n\r\n// restrictions: sum of probability <=1\r\n// m: reward array, [reward, probability, value], sum(probability)<=1\r\n// b: bonus array, [tries, value]\r\n// n: num of tries\r\n// c: cost of each try\r\n// returns: value / cost\r\nfunction calc_gacha_value(n, rewards) {\r\n    let value=0;\r\n    for (let name in rewards){\r\n        if (!rewards.hasOwnProperty(name))\r\n            continue;\r\n        let r=rewards[name];\r\n        // Disabled reward\r\n        if (r[2]===false) continue;\r\n        let prob_get=1-bionomial_cdf(0,n,r[0]);\r\n        value+=prob_get*r[1];\r\n    }\r\n    return value;\r\n}\r\n\r\nconst useInput = initialValue => {\r\n    const [value, setValue] = useState(initialValue);\r\n    return {\r\n        value,\r\n        setValue,\r\n        reset: () => setValue(\"\"),\r\n        bind: {\r\n            value,\r\n            onChange: event => {\r\n                setValue(event.target.value);\r\n            }\r\n        }\r\n    };\r\n};\r\n\r\nfunction RewardTable(rewards,setRewards,headers){\r\n    const { value:raddN, bind:bindRaddN, reset:resetRaddN } = useInput('');\r\n    const { value:raddP, bind:bindRaddP, reset:resetRaddP } = useInput('');\r\n    const { value:raddV, bind:bindRaddV, reset:resetRaddV } = useInput('');\r\n    const addReward = (e) =>{\r\n        e.preventDefault();\r\n        setRewards({...rewards, [raddN]:[Number(raddP),Number(raddV),true]});\r\n        resetRaddN();\r\n        resetRaddP();\r\n        resetRaddV();\r\n    };\r\n    const handleSwitch = (e) =>{\r\n        const name=e.target.name;\r\n        let val=[...rewards[name]];\r\n        val[2]=e.target.checked;\r\n        setRewards({...rewards, [name]:val});\r\n    };\r\n    const removeReward = (name) =>{\r\n        let newVal={...rewards};\r\n        delete newVal[name];\r\n        setRewards(newVal);\r\n    };\r\n    let rewardList=[];\r\n    for (let name in rewards){\r\n        if (!rewards.hasOwnProperty(name))\r\n            continue;\r\n        rewardList.push(\r\n                <TableRow key={name}>\r\n                    <TableCell padding='switch'>\r\n                        <Switch color=\"primary\" checked={rewards[name][2]} name={name} onChange={handleSwitch}/>\r\n                    </TableCell>\r\n                    <TableCell>{name}</TableCell>\r\n                    <TableCell>{rewards[name][0]}</TableCell>\r\n                    <TableCell>{rewards[name][1]}</TableCell>\r\n                    <TableCell>\r\n                        <Button variant=\"outlined\" color=\"secondary\" onClick={e=>removeReward(name)} >Remove</Button>\r\n                    </TableCell>\r\n                </TableRow>\r\n        );\r\n    }\r\n    return (\r\n        <TableContainer component={Paper}>\r\n            <Table aria-label=\"simple table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell padding=\"checkbox\"/>\r\n                        {headers.map(h=>(<TableCell>{h}</TableCell>))}\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {rewardList}\r\n                    <TableRow>\r\n                        <TableCell padding=\"checkbox\"/>\r\n                        <TableCell><TextField label=\"Name\" variant=\"outlined\" size=\"small\" required {...bindRaddN}/></TableCell>\r\n                        <TableCell><TextField label=\"Prob\" variant=\"outlined\" size=\"small\" required {...bindRaddP}/></TableCell>\r\n                        <TableCell><TextField label=\"Value\" variant=\"outlined\" size=\"small\" required {...bindRaddV}/></TableCell>\r\n                        <TableCell><Button variant=\"contained\" color=\"primary\" onClick={addReward}>Add</Button></TableCell>\r\n                    </TableRow>\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    )\r\n}\r\n\r\nfunction calc_spark_value(n,rewards){\r\n    let vals=[];\r\n    for (let name in rewards){\r\n        if (!rewards.hasOwnProperty(name))\r\n            continue;\r\n        let v=rewards[name];\r\n        vals.push([(v[2]?v[1]:0),v[0]]);\r\n    }\r\n    vals.sort((a,b)=>b[0]-a[0]);\r\n    let value=0;\r\n    let prob=1;\r\n    vals.forEach(x=>{\r\n        console.log(x);\r\n        let fail=bionomial_cdf(0,n,x[1]);\r\n        value+=prob*(1-fail)*x[0];\r\n        prob*=fail;\r\n    });\r\n    return value;\r\n}\r\n\r\nexport function GachaTool() {\r\n    const [rewards, setRewards] = useState({});\r\n    const { value:pulls, bind:bindPulls, reset:resetPulls } = useInput(0);\r\n    const spark_value=calc_spark_value(300-pulls,rewards);\r\n    const gacha_value=calc_gacha_value(300-pulls,rewards);\r\n    return (\r\n        <div>\r\n            <TextField label=\"Pulls Done\" variant=\"outlined\" required {...bindPulls}/>\r\n            <Typography variant=\"subtitle1\">Estimated spark value: {spark_value}</Typography>\r\n            <Typography variant=\"subtitle1\">Gacha value per pull if Spark: {(gacha_value+spark_value)/(300-pulls)}</Typography>\r\n            {\r\n                RewardTable(rewards,setRewards,['Reward','Probability','Value','Action'])\r\n            }\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {BrowserRouter as Router,\n    Switch,\n    Route,\n    Link} from \"react-router-dom\";\nimport {GachaTool} from \"./GachaTool\";\n\nfunction App() {\n  return (\n    <Router>\n        <Switch>\n            <Route path='/'>\n                <GachaTool/>\n            </Route>\n            <Route path='/gacha_tool'>\n                <GachaTool/>\n            </Route>\n        </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}